{"version":3,"sources":["Components/Landing.js","Components/Graphs.js","App.js","serviceWorker.js","index.js"],"names":["Landing","id","src","alt","href","Graphs","data","labels","Array","i","runs","map","entry","batting_score","wicket","filter","wickets","labels2","length","countWinningMatch","match_result","countLostMatch","data1","datasets","label","fill","lineTension","borderDash","backgroundColor","borderColor","pointBackgroundColors","borderCapStyle","data2","pointBorderWidth","pointMoverRadius","pointMoverBorderWidth","borderColors","data3","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLA+EeA,MA9Ef,WACE,OACE,0BAAMC,GAAG,QACP,wBAAIA,GAAG,SAAP,8CACA,wDAC4B,qDAE5B,4BAAQA,GAAG,WACT,yBACEA,GAAG,QACHC,IAAI,qBACJC,IAAI,mCAEN,gCAAYF,GAAG,eAAf,+EAKF,6BAASA,GAAG,gBACV,wBAAIA,GAAG,YAAP,gDACA,4BACE,4BACE,wCADF,mCAGA,4BACE,wCADF,uCAC4D,IAC1D,6CAEF,4BACE,wCADF,6BACkD,IAChD,+CAFF,wBAIA,4BACE,wCADF,sCAC2D,IACzD,6CAEF,4BACE,wCADF,6BACkD,IAChD,4CAFF,qBAIA,4BACE,wCADF,sBAC2C,IACzC,gDAFF,uBAIA,4BACE,6CADF,+CAIA,4BACE,wCADF,2FAIA,4BACE,wCADF,8FAIA,4BACE,wCADF,wEAMF,kDAEE,uBACEA,GAAG,eACHG,KAAK,kDAEJ,IAJH,QAFF,Q,QCmBOC,MAhFf,YAEE,IAFyB,IAATC,EAAQ,EAARA,KACVC,EAASC,MAAM,KACZC,EAAI,EAAGA,GAAK,IAAKA,IAAKF,EAAOE,GAAKA,EAK3C,IAJA,IAAMC,EAAOJ,EAAKK,IAAI,SAAAC,GAAK,OAAIA,EAAMC,gBAE/BC,EADSR,EAAKS,OAAO,SAAAH,GAAK,MAAsB,MAAlBA,EAAMI,UAClBL,IAAI,SAAAC,GAAK,OAAIA,EAAMI,UACrCC,EAAUT,MAAMM,EAAOI,QACpBT,EAAI,EAAGA,GAAKK,EAAOI,OAAQT,IAAKQ,EAAQR,GAAKA,EACtD,IACMU,EADeb,EAAKS,OAAO,SAAAH,GAAK,MAA2B,QAAvBA,EAAMQ,eACTF,OAEjCG,EADYf,EAAKS,OAAO,SAAAH,GAAK,MAA2B,SAAvBA,EAAMQ,eACZF,OAE3BI,EAAQ,CACZf,OAAQA,EACRgB,SAAU,CACR,CACEC,MAAO,4BACPlB,KAAMI,EACNe,MAAM,EACNC,YAAa,GACbC,WAAY,GACZC,gBAAiB,gBACjBC,YAAa,UACbC,sBAAuB,OACvBC,eAAgB,UAIhBC,EAAQ,CACZzB,OAAQU,EACRM,SAAU,CACR,CACEC,MAAO,8BACPlB,KAAMQ,EACNW,MAAM,EACNC,YAAa,GACbC,WAAY,GACZM,iBAAkB,EAClBC,iBAAkB,EAClBC,sBAAuB,EACvBP,gBAAiB,gBACjBQ,aAAc,UACdN,sBAAuB,OACvBC,eAAgB,UAIhBM,EAAQ,CACZ9B,OAAQ,CAAC,YAAa,aAAc,aAEpCgB,SAAU,CACR,CACEC,MAAO,0CACPlB,KAAM,CAACa,EAAmBE,EA1CV,IAAMA,EAAiBF,GA2CvCM,MAAM,EACNC,YAAa,GACbC,WAAY,GACZM,iBAAkB,EAClBC,iBAAkB,EAClBC,sBAAuB,EACvBP,gBAAiB,CAAC,QAAS,MAAO,SAClCQ,aAAc,UACdN,sBAAuB,OACvBC,eAAgB,UAKtB,OACE,oCACE,mEACA,kBAAC,IAAD,CAAMzB,KAAMgB,IACZ,wDACA,kBAAC,IAAD,CAAKhB,KAAM0B,IACX,uEACA,kBAAC,IAAD,CAAK1B,KAAM+B,MC/DFC,MAVf,WAEE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQhC,KAAMA,MCEAiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.aa1befa0.chunk.js","sourcesContent":["import React from \"react\";\nfunction Landing() {\n  return (\n    <main id=\"main\">\n      <h1 id=\"title\">Sachin Tendulkar -The Greatest of All Time</h1>\n      <p>\n        The man who got the title <strong>\"GOD OF CRICKET\"</strong>\n      </p>\n      <figure id=\"img-div\">\n        <img\n          id=\"image\"\n          src=\"assests/sachin.jpg\"\n          alt=\"One of the sachin best Innings\"\n        />\n        <figcaption id=\"img-caption\">\n          Sachin Tendulkar after scoring one of its centuary from 100 such\n          centuary.\n        </figcaption>\n      </figure>\n      <section id=\"tribute-info\">\n        <h3 id=\"headline\">Here's a time line of Sachin Tendulkar life:</h3>\n        <ul>\n          <li>\n            <strong>1973</strong> - Born in Bombay , Maharashtra\n          </li>\n          <li>\n            <strong>1989</strong> - Test debut on 15 November 1989 vs{\" \"}\n            <strong>Pakistan</strong>\n          </li>\n          <li>\n            <strong>2013</strong> - Last Test played againt{\" \"}\n            <strong>West Indies</strong> on 14 November 2013\n          </li>\n          <li>\n            <strong>1989</strong> - ODI debut on 18 December 1989 vs{\" \"}\n            <strong>Pakistan</strong>\n          </li>\n          <li>\n            <strong>2012</strong> - Last ODI played against{\" \"}\n            <strong>Pakistan</strong> on 18 march 2012\n          </li>\n          <li>\n            <strong>2006</strong> - Only T20 against{\" \"}\n            <strong>South Africa</strong> on 1 December 2006\n          </li>\n          <li>\n            <strong>2008-2013</strong> - Sachin played for Mumbai indians in\n            IPL.\n          </li>\n          <li>\n            <strong>1994</strong> - Tendulkar received the Arjuna Award in 1994\n            for his outstanding sporting achievement\n          </li>\n          <li>\n            <strong>1997</strong> - He received The Rajiv Gandhi Khel Ratna\n            award in 1997, India's highest sporting honour.\n          </li>\n          <li>\n            <strong>2014</strong> - Sachin received BHARAT RATNA in Feb 2014\n            highest award in india.\n          </li>\n        </ul>\n\n        <h3>\n          Read more about him\n          <a\n            id=\"tribute-link\"\n            href=\"https://en.wikipedia.org/wiki/Sachin_Tendulkar\"\n          >\n            {\" \"}\n            Here\n          </a>\n          .\n        </h3>\n      </section>\n    </main>\n  );\n}\n\nexport default Landing;\n","import React from \"react\";\nimport { Bar, Pie, Line } from \"react-chartjs-2\";\nfunction Graphs({ data }) {\n  const labels = Array(463);\n  for (let i = 0; i <= 463; i++) labels[i] = i;\n  const runs = data.map(entry => entry.batting_score);\n  let wicketss = data.filter(entry => entry.wickets !== \"-\");\n  const wicket = wicketss.map(entry => entry.wickets);\n  const labels2 = Array(wicket.length);\n  for (let i = 0; i <= wicket.length; i++) labels2[i] = i;\n  const winningMatch = data.filter(entry => entry.match_result === \"won\");\n  const countWinningMatch = winningMatch.length;\n  const lostMatch = data.filter(entry => entry.match_result === \"lost\");\n  const countLostMatch = lostMatch.length;\n  const countTieMatch = 463 - countLostMatch - countWinningMatch;\n  const data1 = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"Runs scored in each match\",\n        data: runs,\n        fill: false,\n        lineTension: 0.1,\n        borderDash: [],\n        backgroundColor: \"rgb(75,32,23)\",\n        borderColor: \"#4B2017\",\n        pointBackgroundColors: \"#fff\",\n        borderCapStyle: \"butt\"\n      }\n    ]\n  };\n  const data2 = {\n    labels: labels2,\n    datasets: [\n      {\n        label: \"wickets Taken in each match\",\n        data: wicket,\n        fill: false,\n        lineTension: 0.1,\n        borderDash: [],\n        pointBorderWidth: 1,\n        pointMoverRadius: 5,\n        pointMoverBorderWidth: 2,\n        backgroundColor: \"rgb(75,32,23)\",\n        borderColors: \"#4B2017\",\n        pointBackgroundColors: \"#fff\",\n        borderCapStyle: \"butt\"\n      }\n    ]\n  };\n  const data3 = {\n    labels: [\"Win Match\", \"Lost Match\", \"Tie Match\"],\n\n    datasets: [\n      {\n        label: \"Match Result When sachin Played In Team\",\n        data: [countWinningMatch, countLostMatch, countTieMatch],\n        fill: false,\n        lineTension: 0.1,\n        borderDash: [],\n        pointBorderWidth: 1,\n        pointMoverRadius: 5,\n        pointMoverBorderWidth: 2,\n        backgroundColor: [\"green\", \"red\", \"brown\"],\n        borderColors: \"#4B2017\",\n        pointBackgroundColors: \"#fff\",\n        borderCapStyle: \"butt\"\n      }\n    ]\n  };\n\n  return (\n    <>\n      <h3>Run scored by sachin in each inning</h3>\n      <Line data={data1} />\n      <h3>Wickets Taken by Sachin </h3>\n      <Bar data={data2} />\n      <h3>Match Result When Sachin played in Team</h3>\n      <Pie data={data3} />\n    </>\n  );\n}\nexport default Graphs;\n","import React from \"react\";\nimport \"./App.css\";\nimport data from \"./sachin.json\";\nimport Landing from \"./Components/Landing\";\nimport Graphs from \"./Components/Graphs\";\nfunction App() {\n  // console.log(data);\n  return (\n    <>\n      <Landing />\n      <Graphs data={data} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}